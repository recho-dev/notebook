/**
 * @title Halloween Clock
 * @author Bairui Su
 * @created 2025-10-31
 * @pull_request 188
 * @github pearmini
 * @thumbnail_start 18
 */

/**
 * ============================================================================
 * =                            Halloween Clock                                =
 * ============================================================================
 *
 * Recreated the Halloween Clock by Kirsten Allen.
 *
 * - https://codepen.io/kirstenallen/pen/PwZpoEN
 */

//âžœ ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€
//âžœ ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€
//âžœ ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€
//âžœ ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€
//âžœ ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€
//âžœ ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€
//âžœ ðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸ’€ðŸ’€ðŸ’€ðŸŽƒðŸŽƒðŸŽƒðŸ’€ðŸ’€
{
  const date = new Date(now);
  const h = date.getHours().toString().padStart(2, "0");
  const m = date.getMinutes().toString().padStart(2, "0");
  const s = date.getSeconds().toString().padStart(2, "0");
  const time = `${h}:${m}:${s}`;
  const buffer = range(7).map(() => range(6 * time.length).fill("ðŸ’€"));
  for (let i = 0; i < time.length; i++) {
    const char = time[i];
    const pattern = digitPatterns[char];
    for (let j = 0; j < pattern.length; j++) {
      for (let k = 0; k < pattern[j].length; k++) {
        buffer[j][i * 6 + k] = pattern[j][k] ? "ðŸŽƒ" : "ðŸ’€";
      }
    }
  }
  echo(buffer.map((row) => row.join("")).join("\n"));
}

function range(n) {
  return Array.from({length: n}, (_, i) => i);
}

const now = recho.now();

const digitPatterns = {
  0: [
    [0, 1, 1, 1, 0],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 1, 1, 0],
  ],
  1: [
    [0, 0, 1, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 1, 1, 1, 0],
  ],
  2: [
    [0, 1, 1, 1, 0],
    [1, 0, 0, 0, 1],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [0, 0, 1, 0, 0],
    [0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1],
  ],
  3: [
    [1, 1, 1, 1, 0],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1],
    [1, 1, 1, 1, 0],
  ],
  4: [
    [0, 0, 0, 1, 0],
    [0, 0, 1, 1, 0],
    [0, 1, 0, 1, 0],
    [1, 0, 0, 1, 0],
    [1, 1, 1, 1, 1],
    [0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0],
  ],
  5: [
    [1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1],
    [1, 1, 1, 1, 0],
  ],
  6: [
    [0, 1, 1, 1, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 1, 1, 0],
  ],
  7: [
    [1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [0, 0, 1, 0, 0],
    [0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0],
  ],
  8: [
    [0, 1, 1, 1, 0],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 1, 1, 0],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 1, 1, 0],
  ],
  9: [
    [0, 1, 1, 1, 0],
    [1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 1, 1, 1],
    [0, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 1, 1, 0],
  ],
  ":": [
    [0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0],
  ],
};
